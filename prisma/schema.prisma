// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  user_id        Int      @id @default(autoincrement())
  first_name     String
  last_name      String
  email          String   @unique
  password_hash  String
  role           Role
  phone_number   String?
  address        String?
  profile_picture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  // Relationships
  properties    Property[]   @relation("UserProperties")
  inquiries     Inquiry[]    @relation("UserInquiries")
  favorites     Favorite[]   @relation("UserFavorites")
}
enum Role {
  BUYER
  SELLER
  ADMIN
}


model Property {
  id            Int        @id @default(autoincrement())
  title         String
  description   String
  price         Float
  address       String
  propertyType  PropertyType
  status        PropertyStatus
  listedDate    DateTime   @default(now())
  updatedDate   DateTime   @updatedAt
  numBedrooms   Int
  numBathrooms  Int
  squareMeters  Int
  yearBuilt     Int
  latitude      Float
  longitude     Float
  features      Json

  // Relationships
  user          User?      @relation("UserProperties", fields: [userId], references: [user_id]) // Added fields and references
  userId        Int?       // Add userId field for the relation to work
  images        Image[]
  inquiries     Inquiry[]
  favorites     Favorite[]
}


enum PropertyType {
  HOUSE
  APARTMENT
  COMMERCIAL
  LAND
}

enum PropertyStatus {
  AVAILABLE
  SOLD
  RENTED
}

model Image {
  id          Int        @id @default(autoincrement())
  url         String
  imageType   ImageType

  // Relationships
  property    Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  Int
}

enum ImageType {
  MAIN
  GALLERY
  FLOORPLAN
}

model Inquiry {
  id           Int       @id @default(autoincrement())
  message      String
  createdDate  DateTime  @default(now())
  status       InquiryStatus

  // Relationships
  property     Property  @relation(fields: [propertyId], references: [id])
  propertyId   Int
  user         User      @relation("UserInquiries", fields: [userId], references: [user_id])
  userId       Int
}

enum InquiryStatus {
  UNREAD
  RESPONDED
}

model Favorite {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())

  // Relationships
  user         User      @relation("UserFavorites", fields: [userId], references: [user_id])
  userId       Int
  property     Property  @relation(fields: [propertyId], references: [id])
  propertyId   Int

  @@unique([userId, propertyId]) // Add this line to create a composite unique constraint
}

